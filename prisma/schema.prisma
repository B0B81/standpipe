// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @unique
  username  String    @unique
  email     String
  firstname String?
  lastname  String?
  admin     Boolean   @default(false)
  session   Session[]
  Key       Key[]

  @@map("user")
}

model Session {
  id             String @id @unique
  user_id        String
  active_expires BigInt
  idle_expires   BigInt
  user           User   @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
  @@map("session")
}

model Key {
  id              String  @id @unique
  hashed_password String?
  user_id         String
  primary         Boolean
  user            User    @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
  @@map("key")
}

model Customer {
  id           Int           @id @default(autoincrement())
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  firstname    String?
  lastname     String
  zip          Int?
  city         String?
  street       String?
  housenumber  String?
  email        String?       @unique
  iban         String?
  transactions Transaction[]

  @@map("customers")
}

model Standpipe {
  id             Int           @id @default(autoincrement())
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  standpipeNr    Int
  manufacturer   String?
  type           String?
  productionYear String?
  meteringcode   String?
  userId         String
  transactions   Transaction[]

  @@map("standpipes")
}

model Manufacturer {
  id             Int           @id @default(autoincrement())
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  companyname    String?
  userId         String

  @@map("manufacturers")
}

model Transaction {
  id                 Int       @id @default(autoincrement())
  customer           Customer  @relation(references: [id], fields: [customerId])
  customerId         Int
  standpipe          Standpipe @relation(references: [id], fields: [standpipeId])
  standpipeId        Int
  date_start         DateTime
  date_end           DateTime?
  metervalue_initial Decimal
  metervalue_return  Decimal?
  deposit            Boolean
  dailybase          Boolean   @default(true)

  @@map("transactions")
}
